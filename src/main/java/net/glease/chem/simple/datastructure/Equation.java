
package net.glease.chem.simple.datastructure;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * <p>
 * Equation complex type的 Java 类。
 *
 * <p>
 * 以下模式片段指定包含在此类中的预期内容。
 *
 * <pre>
 * &lt;complexType name="Equation">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence maxOccurs="unbounded">
 *         &lt;element name="condition" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="catalyst" maxOccurs="unbounded" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="reagent" type="{http://www.w3.org/2001/XMLSchema}IDREF" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="reactant" type="{http://glease.net/chem/simple/DataStructure}Reactant" maxOccurs="unbounded"/>
 *         &lt;element name="resultant" type="{http://glease.net/chem/simple/DataStructure}Resultant" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute ref="{http://glease.net/chem/simple/DataStructure}temp"/>
 *       &lt;attribute name="pressure" type="{http://glease.net/chem/simple/DataStructure}PositiveDouble" default="1.01e+5" />
 *       &lt;attribute name="K" type="{http://glease.net/chem/simple/DataStructure}PositiveDouble" default="INF" />
 *       &lt;attribute name="heat" type="{http://glease.net/chem/simple/DataStructure}JavaDouble" default="0" />
 *       &lt;attribute name="speed" use="required" type="{http://glease.net/chem/simple/DataStructure}PositiveDouble" />
 *       &lt;attribute name="solvent" type="{http://www.w3.org/2001/XMLSchema}IDREF" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface Equation {

	/**
	 * <p>
	 * anonymous complex type的 Java 类。
	 * 
	 * <p>
	 * 以下模式片段指定包含在此类中的预期内容。
	 * 
	 * <pre>
	 * &lt;complexType>
	 *   &lt;complexContent>
	 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
	 *       &lt;attribute name="reagent" type="{http://www.w3.org/2001/XMLSchema}IDREF" />
	 *     &lt;/restriction>
	 *   &lt;/complexContent>
	 * &lt;/complexType>
	 * </pre>
	 * 
	 * 
	 */
	public interface Catalyst {

		/**
		 * 获取reagent属性的值。
		 * 
		 * @return possible object is {@link Object }
		 * 
		 */
		Reagent getReagent();

		/**
		 * 设置reagent属性的值。
		 * 
		 * @param value
		 *            allowed object is {@link Object }
		 * 
		 */
		void setReagent(Reagent value);

	}

	List<Equation.Catalyst> getCatalysts();

	List<String> getConditions();
	
	default List<EquationComponent> getAllEquationComponents() {
		return Stream.concat(getResultants().stream(), getReactants().stream()).collect(Collectors.toList());
	}

	/**
	 * 
	 * Heat changed. Positive value means the reaction is exothermic. Default to
	 * 0 means the heat change is so little that could be ignored in production
	 * (like the heat generated by most neutralization reaction). Measured in
	 * kJ.
	 * 
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getHeat();

	/**
	 * 
	 * Default to INF which means this reaction is an irreversible reaction.
	 * 
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getK();

	/**
	 * 获取pressure属性的值。
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getPressure();

	List<Reactant> getReactants();

	List<Resultant> getResultants();

	/**
	 * 获取solvent属性的值。
	 * 
	 * @return possible object is {@link Object }
	 * 
	 */
	Reagent getSolvent();

	/**
	 * 获取speed属性的值。
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	Double getSpeed();

	/**
	 * 
	 * Represents a temperature, measured in K, not Censils
	 * 
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getTemp();

	/**
	 * 设置heat属性的值。
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setHeat(Double value);

	/**
	 * 设置k属性的值。
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setK(Double value);

	/**
	 * 设置pressure属性的值。
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setPressure(Double value);

	/**
	 * 设置solvent属性的值。
	 * 
	 * @param value
	 *            allowed object is {@link Object }
	 * 
	 */
	void setSolvent(Reagent value);

	/**
	 * 设置speed属性的值。
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setSpeed(Double value);

	/**
	 * 设置temp属性的值。
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setTemp(Double value);

}
