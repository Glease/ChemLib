
package net.glease.chem.simple.datastructure;

import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import net.glease.chem.simple.scoping.IScope;
import net.glease.chem.simple.scoping.IScoped;
import net.glease.chem.simple.scoping.ScopeException;

/**
 * <p>
 * The Java class of Equation.
 *
 * <p>
 * The following XML Schema snippet contains the expect content of this class.
 *
 * <pre>
 * &lt;complexType name="Equation">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence maxOccurs="unbounded">
 *         &lt;element name="condition" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="catalyst" maxOccurs="unbounded" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;attribute name="reagent" type="{http://www.w3.org/2001/XMLSchema}IDREF" />
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="reactant" type="{http://glease.net/chem/simple/DataStructure}Reactant" maxOccurs="unbounded"/>
 *         &lt;element name="resultant" type="{http://glease.net/chem/simple/DataStructure}Resultant" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *       &lt;attribute ref="{http://glease.net/chem/simple/DataStructure}temp"/>
 *       &lt;attribute name="pressure" type="{http://glease.net/chem/simple/DataStructure}Positivedouble" default="1.01e+5" />
 *       &lt;attribute name="K" type="{http://glease.net/chem/simple/DataStructure}Positivedouble" default="INF" />
 *       &lt;attribute name="heat" type="{http://glease.net/chem/simple/DataStructure}Javadouble" default="0" />
 *       &lt;attribute name="speed" use="required" type="{http://glease.net/chem/simple/DataStructure}Positivedouble" />
 *       &lt;attribute name="solvent" type="{http://www.w3.org/2001/XMLSchema}IDREF" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
public interface Reaction extends Element<ChemDatabase>, IScope<ChemDatabase, Reaction> {

	Set<Reagent> getCatalysts();

	Set<String> getConditions();

	default Set<ReactionComponent> getAllReactionComponents() {
		return Stream.concat(getResultants().stream(), getReactants().stream()).collect(Collectors.toSet());
	}

	@Override
	default void onBind(IScoped<Reaction> o) {
		if(o instanceof Reactant)
			getReactants().add((Reactant) o);
		else if(o instanceof Resultant)
			getResultants().add((Resultant) o);
		else
			throw new ScopeException("Element not identified.", this, o);
		IScope.super.onBind(o);
	}

	@Override
	default void onUnbind(IScoped<Reaction> o) {
		if(o instanceof Reactant)
			if(!getReactants().remove(o))
				throw new ScopeException("Not binded to this scope", this, o);
		else if(o instanceof Resultant)
			if(!getResultants().remove(o))
				throw new ScopeException("Not binded to this scope", this, o);
		else
			throw new ScopeException("Element not identified.", this, o);
		IScope.super.onUnbind(o);
	}

	/**
	 * 
	 * Heat changed. Positive value means the reaction is exothermic. Default to
	 * 0 means the heat change is so little that could be ignored in production
	 * (like the heat generated by most neutralization reaction). Measured in
	 * kJ.
	 * 
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getHeat();

	/**
	 * 
	 * Default to INF which means this reaction is an irreversible reaction.
	 * 
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getK();

	/**
	 * Get the value of name.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	String getName();

	/**
	 * Get the value of pressure.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getPressure();

	Set<Reactant> getReactants();

	Set<Resultant> getResultants();

	/**
	 * Get the value of solvent.
	 * 
	 * @return possible object is {@link Object }
	 * 
	 */
	Reagent getSolvent();

	/**
	 * Get the value of speed.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getSpeed();

	/**
	 * 
	 * Represents a temperature, measured in K, not Censils
	 * 
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	double getTemp();

	/**
	 * Set the value of heat.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setHeat(double value);

	/**
	 * Set the value of id.
	 * 
	 */
	void setId(String value);

	/**
	 * Set the value of k.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setK(double value);

	/**
	 * Set the value of name.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setName(String value);
	
	/**
	 * Set the value of pressure.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setPressure(double value);

	/**
	 * Set the value of solvent.
	 * 
	 * @param value
	 *            allowed object is {@link Object }
	 * 
	 */
	void setSolvent(Reagent value);

	/**
	 * Set the value of speed.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setSpeed(double value);

	/**
	 * Set the value of temp.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	void setTemp(double value);

}
