package net.glease.chem.simple.datastructure;

import java.util.Set;
import java.util.stream.Stream;

import net.glease.chem.simple.scoping.IScope;
import net.glease.chem.simple.scoping.IScoped;

/**
 * <p>
 * The Java class of Reaction. Reaction represents a real chemical reaction, in
 * a very particular state. The {@link Reaction} only tells that such reaction
 * will happen if variables are just exactly as given. TODO enhance javadoc
 *
 * @author glease
 * @since 0.1
 *
 */
public interface Reaction extends IElement<ChemDatabase, Reaction>, IScope<ChemDatabase, Reaction> {

	boolean addCatalyst(Reagent catalyst);

	boolean addCondition(String condition);

	/**
	 * Get a new set containing all {@link ReactionComponent reactants and
	 * resultants} in this {@link Reaction}. The set is modifiable and is <b>
	 * only a snapshot of current {@link Reaction}</b>, i.e. any further
	 * modification both to the returned set and this {@link Reaction} won't
	 * interfere with each other.
	 *
	 * @return possible object is {@link Set&lt;Reagent> }
	 */
	default Stream<ReactionComponent<?>> getAllReactionComponents() {
		return Stream.concat(getResultants().stream(), getReactants().stream());
	}

	/**
	 * Get a set containing all {@link Reagent catalysts} in this
	 * {@link Reaction}. The set is unmodifiable. Addition/removal to this set
	 * should be done with {@link #addCatalyst(Reagent)} and
	 * {@link #removeCatalyst(Reagent)}
	 *
	 * @return possible object is {@link Set&lt;Reagent> }
	 */
	Set<Reagent> getCatalysts();

	/**
	 * Get a set containing all {@link String conditions} in this
	 * {@link Reaction}. The set is unmodifiable. Addition/removal to this set
	 * should be done with {@link #addCondition(String)} and
	 * {@link #removeCondition(String)}
	 *
	 * @return possible object is {@link Set&lt;String> }
	 */
	Set<String> getConditions();

	/**
	 *
	 * Heat changed. Positive value means the reaction is exothermic. Default to
	 * 0 means the heat change is so little that could be ignored in production
	 * (like the heat generated by most neutralization reaction). Measured in
	 * kJ.
	 *
	 *
	 * @return possible object is {@link double }
	 *
	 */
	double getHeat();

	/**
	 *
	 * Default to INF which means this reaction is an irreversible reaction.
	 *
	 *
	 * @return possible object is {@link double }
	 *
	 */
	double getK();

	/**
	 * Get the value of name.
	 *
	 * @return possible object is {@link String }
	 *
	 */
	String getName();

	/**
	 * Get the value of pressure.
	 *
	 * @return possible object is {@link double }
	 *
	 */
	double getPressure();

	/**
	 * Get a set containing all {@link Reactant reactants} in this
	 * {@link Reaction}. The set is unmodifiable. Addition/removal to this set
	 * should be done with {@link IScoped#bind(IScope) bind(this)} or
	 * {@link IScoped#bind(IScope) bind(null)}.
	 *
	 * @return possible object is {@link Set&lt;Reactant> }
	 */
	Set<Reactant> getReactants();

	/**
	 * Get a set containing all {@link Resultant resultants} in this
	 * {@link Reaction}. The set is unmodifiable. Addition/removal to this set
	 * should be done with {@link IScoped#bind(IScope) bind(this)} or
	 * {@link IScoped#bind(IScope) bind(null)}.
	 *
	 * @return possible object is {@link Set&lt;Resultant> }
	 */
	Set<Resultant> getResultants();

	/**
	 * Get the value of solvent.
	 *
	 * @return possible object is {@link Reagent }
	 *
	 */
	Reagent getSolvent();

	/**
	 * Get the value of speed. measured in {@code mol/(L*min)}
	 *
	 * @return possible object is {@link double }
	 *
	 */
	double getSpeed();

	/**
	 *
	 * Represents a temperature, measured in K, not Censils. Defaults to
	 * {@code 293.15d} i.e. 20 cense
	 *
	 *
	 * @return possible object is {@link double }
	 *
	 */
	double getTemp();

	@Override
	default boolean isBroken() {
		return IElement.super.isBroken() || Utils.isBroken(this, getAllReactionComponents(), getCatalysts().stream())
				|| Utils.isBroken(this, getSolvent()) || getK() < 0 || getTemp() < 0 || getSpeed() < 0;
	}

	boolean removeCatalyst(Reagent catalyst);

	boolean removeCondition(String condition);

	@Override
	default ChemDatabase rootScope() {
		return scope();
	}

	/**
	 * Set the value of heat.
	 *
	 * @param value
	 *            allowed object is {@link double }
	 *
	 */
	void setHeat(double value);

	/**
	 * Set the value of id.
	 *
	 * @param value
	 *            allowed object is {@link String }
	 */
	void setId(String value);

	/**
	 * Set the value of k.
	 *
	 * @param value
	 *            allowed object is {@link double }
	 *
	 */
	void setK(double value);

	/**
	 * Set the value of name.
	 *
	 * @param value
	 *            allowed object is {@link String }
	 *
	 */
	void setName(String value);

	/**
	 * Set the value of pressure.
	 *
	 * @param value
	 *            allowed object is {@link double }
	 *
	 */
	void setPressure(double value);

	/**
	 * Set the value of solvent.
	 *
	 * @param value
	 *            allowed object is {@link Reagent }
	 *
	 */
	void setSolvent(Reagent value);

	/**
	 * Set the value of speed.
	 *
	 * @param value
	 *            allowed object is {@link double }
	 *
	 */
	void setSpeed(double value);

	/**
	 * Set the value of temp.
	 *
	 * @param value
	 *            allowed object is {@link double }
	 *
	 */
	void setTemp(double value);

}
